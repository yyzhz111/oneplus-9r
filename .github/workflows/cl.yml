name: GKI Kernel Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true

jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android14-4.19"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      # Install ccache
      - name: Install ccache
        run: sudo apt update && sudo apt install -y ccache

      - name: Set up ccache
        run: |
          mkdir -p ~/.cache/bazel # Ensure the directory exists
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      
      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: android14-4.19-ccache-${{ github.sha }}
          restore-keys: |
            android14-4.19-ccache-
      
      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: Download toolchain (if cache not found)
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set environment variables
        run: |
          # echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      # - name: Set boot sign key
      #   env:
      #     BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
      #   run: |
      #     if [ ! -z "$BOOT_SIGN_KEY" ]; then
      #       echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
      #       echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
      #     else
      #       echo "BOOT_SIGN_KEY is not set. Exiting..."
      #       exit 1
      #     fi

      - name: Install Repo
        run: |
          # Install dependencies
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."

          # Define the branch names using the inputs values
          #SUSFS_BRANCH="kernel-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for SUSFS: kernel-4.19"

          # Clone repositories using the branch names
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "android-4.19"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.19
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="kernel-4.19"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # # Initialize and sync kernel source
          # echo "Initializing and syncing kernel source..."
          # # FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          # $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-android-4.19-stable --repo-rev=v2.16

          # REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common common-android-4.19-stable)
          # DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml

          # # Check if branch is deprecated
          # if grep -q deprecated <<< $REMOTE_BRANCH; then
          #   echo "Found deprecated branch: $FORMATTED_BRANCH"
          #   sed -i "s/\"common-android-4.19-stable\"/\"deprecated\/common-android-4.19-stable\"/g" $DEFAULT_MANIFEST_PATH
          # fi

          $REPO init -u https://android.googlesource.com/kernel/manifest -b common-android-4.19-stable --repo-rev=v2.16

          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      # - name: Copy file
      #   if: ${{ inputs.make_release == false }}
      #   run: |
      #     cp -r $CONFIG source-clean-$CONFIG

      # - name: Upload artifact
      #   if: ${{ inputs.make_release == false }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: source-clean-${{ env.CONFIG }}
      #     path: source-clean-${{ env.CONFIG }}

      # - name: Remove file
      #   if: ${{ inputs.make_release == false }}
      #   run: |
      #     rm -rf source-clean-$CONFIG

      # - name: Determine the branch for KernelSU
      #   run: |
      #     if [[ "${{ inputs.kernelsu_branch }}" == "Stable" ]]; then
      #         echo "BRANCH=-" >> $GITHUB_ENV
      #     elif [[ "${{ inputs.kernelsu_branch }}" == "Dev" && ( "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" ) ]]; then
      #         echo "BRANCH=-s main" >> $GITHUB_ENV
      #     elif [[ "${{ inputs.kernelsu_branch }}" == "Dev" && "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
      #         echo "BRANCH=-s next" >> $GITHUB_ENV
      #     elif [[ "${{ inputs.kernelsu_branch }}" == "Other" && -n "${{ inputs.kernelsu_branch_other }}" ]]; then
      #       echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
      #     else
      #       echo "Error: Custom branch not provided for 'Other'" >&2
      #       exit 1
      #     fi
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile


          # if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
          #   echo "Adding KernelSU Official..."
          #   curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          # elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
          #   echo "Adding KernelSU Next..."
          #   curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash $BRANCH
          #   #curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          # elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
          #   echo "Adding KernelSU MKSU..."
          #   curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          # fi
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.19.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          

          # Change to common directory and apply common SUSFS patch
          cd common
          patch -p1 < 50_add_susfs_in_android-4.19-stable.patch || true

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"

          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS fix changes directly
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          sed -i '/bool ksu_vfs_read_hook __read_mostly = true;/d' KernelSU/kernel/ksud.c
          sed -i '/bool ksu_execveat_hook __read_mostly = true;/d' KernelSU/kernel/ksud.c
          sed -i '/bool ksu_input_hook __read_mostly = true;/d' KernelSU/kernel/ksud.c
          sed -i '/#include "selinux\/selinux.h"/a \
          bool ksu_vfs_read_hook = true;\
          bool ksu_execveat_hook = true;\
          bool ksu_input_hook = true;\
          EXPORT_SYMBOL(ksu_vfs_read_hook);\
          EXPORT_SYMBOL(ksu_execveat_hook);\
          EXPORT_SYMBOL(ksu_input_hook);' KernelSU/kernel/ksud.c || true
          sed -i '/#include <linux\/types.h>/a \
          extern bool ksu_vfs_read_hook;\
          extern bool ksu_execveat_hook;\
          extern bool ksu_input_hook;' KernelSU/kernel/ksud.h || true

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG/common..."
          cd "$CONFIG/common"
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < new_hooks.patch
            
      - name: Add SUSFS Configuration Settings
        run: |
          cd "$CONFIG/common"
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./arch/arm64/configs/gki_defconfig
          sed -i '2s/check_defconfig//' ./build.config.gki

      - name: Config Kernel Name
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          sed -i '$s|echo "\$res"|echo "\$res-Reeky"|' ./common/scripts/setlocalversion

          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -E -i '/^CONFIG_LOCALVERSION=/ s/(.*)"$/\1-Reeky"/' ./common/arch/arm64/configs/gki_defconfig
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl

      # - name: Copy file
      #   if: ${{ inputs.make_release == false }}
      #   run: |
      #     cp -r $CONFIG source-patched-$CONFIG

      # - name: Upload artifact
      #   if: ${{ inputs.make_release == false }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: source-patched-${{ env.CONFIG }}
      #     path: source-patched-${{ env.CONFIG }}

      # - name: Remove file
      #   if: ${{ inputs.make_release == false }}
      #   run: |
      #     rm -rf source-patched-$CONFIG

      - name: Build with retry
        run: |
            # set -e
            # set -x
            # cd "$CONFIG"
            # echo "Building the kernel..."
            # if [ -f "build/build.sh" ]; then
            #   LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
            # else
            #   tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            # fi
            # ccache --show-stats
            cd "$CONFIG"
            echo "Building the kernel..."
            tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast //common:kernel_aarch64_dist || exit 1
      - name: Create Bootimgs Folder and Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          mkdir bootimgs

          cd "$CONFIG/bazel-bin/common/kernel_aarch64/"
          curl -LO "https://github.com/topsuplove1122/Build-tool/releases/download/NP3a-boot/patch_linux"
          chmod +x patch_linux
          ./patch_linux
          rm -rf Image
          mv oImage Image

          cd  "/home/runner/work/oneplus-9r/oneplus-9r/"


          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3

          # Create and upload zip for each format
          ZIP_NAME="android-4.19-stable-AnyKernel3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image

          ZIP_NAME="android-4.19-stable-AnyKernel3-lz4.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4

          ZIP_NAME="kernel-4.19-AnyKernel3-gz.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: Run Boot Image android Build Script
        run: |
          cd bootimgs

          # echo "MKBOOTIMG=/home/runner/work/oneplus-9r/oneplus-9r/android-4.19-stable/tools/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          # export MKBOOTIMG=$MKBOOTIMG
          # chmod +x /home/runner/work/oneplus-9r/oneplus-9r/android-4.19-stable/tools/mkbootimg/mkbootimg.py

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          # $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../android-4.19-stable-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          # $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../android-4.19-stable-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          # $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../android-4.19-stable-boot-lz4.img

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img
